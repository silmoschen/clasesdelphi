unit CPlantanalisis_Int;

interface

uses CNomeclaCCB, SysUtils, CListar, DB, DBTables, CBDT, CUtiles, CIDBFM,
     ContenedorMemo, Forms, CCBloqueos, CNBU;

type

TTPlantillaAnalisisClinicos = class(TObject)
  codigo, items, itemsParalelo, elemento, valoresn, resultado, imputable, observaciones, distancia, Encabezado, Detalle, Formula: string;
  tabla, tabref, thojatrab: TTable;
 public
  { Declaraciones Públicas }
  constructor Create;
  destructor  Destroy; override;

  procedure   Grabar(xcodigo, xitems, xitemsParalelo, xelemento, xvaloresn, xresultado, ximputable, xdistancia, xformula: string; xcantitems: Integer);
  procedure   GrabarRef(xcodigo, xitems, xobservaciones: string);
  procedure   Borrar(xcodigo: string);
  function    BuscarRef(xcodigo, xitems: string): boolean;
  function    Buscar(xcodigo, xitems: string): boolean;
  procedure   getDatos(xcodigo, xitems: string);
  procedure   getDatosRef(xcodigo, xitems: string);
  function    setPlantanalisis: TQuery; overload;
  function    setPlantanalisis(xcodigo: string): TQuery; overload;
  procedure   Listar(xdcodigo, xhcodigo: string; salida: char);
  procedure   ListarModelo(xdcodigo, xhcodigo: string; salida: char);

  function    verificarCodNomeclador(xcodigo: string): boolean;

  function    Bloquear(xproceso: String): Boolean;
  procedure   QuitarBloqueo(xproceso: String);

  procedure   conectar;
  procedure   desconectar;
 private
  { Declaraciones Privadas }
  conexiones: integer;
  idanter: string;
end;

function plantanalisis: TTPlantillaAnalisisClinicos;

implementation

var
  xplantanalisis: TTPlantillaAnalisisClinicos = nil;

constructor TTPlantillaAnalisisClinicos.Create;
begin
  inherited Create;

  tabla     := datosdb.openDB('plantan_int', 'codigo;items');     // Plantilla
  tabref    := datosdb.openDB('refplantan_int', 'codigo;items');  // Referencia de análisis
end;

destructor TTPlantillaAnalisisClinicos.Destroy;
begin
  inherited Destroy;
end;

function TTPlantillaAnalisisClinicos.Buscar(xcodigo, xitems: string): boolean;
// Objetivo...: Buscar el Objeto solicitado
begin
  if datosdb.Buscar(tabla, 'codigo', 'items', xcodigo, xitems) then Result := True else Result := False;
end;

function TTPlantillaAnalisisClinicos.BuscarRef(xcodigo, xitems: string): boolean;
// Objetivo...: Buscar el Objeto solicitado
begin
  if datosdb.Buscar(tabref, 'codigo', 'items', xcodigo, xitems) then Result := True else Result := False;
end;

procedure TTPlantillaAnalisisClinicos.Grabar(xcodigo, xitems, xitemsParalelo, xelemento, xvaloresn, xresultado, ximputable, xdistancia, xformula: string; xcantitems: Integer);
// Objetivo...: Grabar Atributos del Objeto
begin
  if Buscar(xcodigo, xitems) then tabla.Edit else tabla.Append;
  tabla.FieldByName('codigo').AsString        := xcodigo;
  tabla.FieldByName('items').AsString         := xitems;
  tabla.FieldByName('itemsParalelo').AsString := xitemsParalelo;
  tabla.FieldByName('elemento').AsString      := xelemento;
  tabla.FieldByName('valoresn').AsString      := xvaloresn;
  tabla.FieldByName('resultado').AsString     := xresultado;
  tabla.FieldByName('imputable').AsString     := ximputable;
  tabla.FieldByName('distancia').AsString     := xdistancia;
  tabla.FieldByName('formula').AsString       := xformula;
  try
    tabla.Post
  except
    tabla.Cancel
  end;
  if xitems = utiles.sLlenarIzquierda(IntToStr(xcantitems), 2, '0') then Begin
    datosdb.tranSQL('delete from ' + tabla.TableName + ' where codigo = ' + '"' + xcodigo + '"' +  ' and items > ' + '"' + utiles.sLlenarIzquierda(IntToStr(xcantitems), 2, '0') + '"');
    datosdb.refrescar(tabla);
  end;
end;

procedure TTPlantillaAnalisisClinicos.GrabarRef(xcodigo, xitems, xobservaciones: string);
// Objetivo...: Grabar Atributos del Objeto
begin
  if BuscarRef(xcodigo, xitems) then tabref.Edit else tabref.Append;
  tabref.FieldByName('codigo').AsString     := xcodigo;
  tabref.FieldByName('items').AsString      := xitems;
  tabref.FieldByName('observaciones').Value := xobservaciones;
  try
    tabref.Post;
  except
    tabref.Cancel;
  end;
end;

procedure TTPlantillaAnalisisClinicos.Borrar(xcodigo: string);
// Objetivo...: Eliminar un set de objetos, pertenecientes a un análisis concreto
begin
  datosdb.tranSQL('DELETE FROM ' + tabla.TableName + ' WHERE codigo = ' + '"' + xcodigo + '"');
end;

procedure  TTPlantillaAnalisisClinicos.getDatos(xcodigo, xitems: string);
// Objetivo...: Retornar/Iniciar Atributos
begin
  if Buscar(xcodigo, xitems) then
    begin
      codigo        := tabla.FieldByName('codigo').AsString;
      items         := tabla.FieldByName('items').AsString;
      itemsParalelo := tabla.FieldByName('itemsParalelo').AsString;
      elemento      := tabla.FieldByName('elemento').AsString;
      valoresn      := tabla.FieldByName('valoresn').AsString;
      resultado     := tabla.FieldByName('resultado').AsString;
      imputable     := tabla.FieldByName('imputable').AsString;
      distancia     := tabla.FieldByName('distancia').AsString;
      formula       := tabla.FieldByName('formula').AsString;
    end
   else
    begin
      codigo := ''; items := ''; itemsParalelo := ''; elemento := ''; valoresn := ''; resultado := ''; imputable := ''; distancia := ''; formula := '';
    end;
end;

procedure  TTPlantillaAnalisisClinicos.getDatosRef(xcodigo, xitems: string);
// Objetivo...: Retornar/Iniciar Atributos
begin
  if BuscarRef(xcodigo, xitems) then observaciones := tabref.FieldByName('observaciones').Value else observaciones := '';
end;

function TTPlantillaAnalisisClinicos.setplantanalisis: TQuery;
// Objetivo...: Devolver un set de registro con los items
begin
  Result := datosdb.tranSQL('SELECT codigo, items, elemento, resultado, valoresn, imputable, distancia, itemsparalelo, fromula FROM ' + tabla.TableName);
end;

function TTPlantillaAnalisisClinicos.setplantanalisis(xcodigo: string): TQuery;
// Objetivo...: Devolver un set de registro con los items
begin
  Result := datosdb.tranSQL('SELECT codigo, items, elemento, resultado, valoresn, imputable, distancia, itemsparalelo, formula FROM ' + tabla.TableName + ' WHERE codigo = ' + '''' + xcodigo + '''' + ' ORDER BY Items');
end;

procedure TTPlantillaAnalisisClinicos.ListarModelo(xdcodigo, xhcodigo: string; salida: char);
// Objetivo...: Listar Plantilla de análisis clínicos
var
  l, r, t: TQuery; distancia: integer; itp, dtl: boolean;
begin
  List.Titulo(0, 0, ' ', 1, 'Arial, negrita, 14');
  List.Titulo(0, 0, ' Plantilla de Análisis Clínicos', 1, 'Arial, negrita, 14');
  List.Titulo(0, 0, ' ', 1, 'Arial, negrita, 5');
  List.Titulo(0, 0, utiles.espacios(3) +  'Elemento', 1, 'Arial, cursiva, 8');
  List.Titulo(55, list.Lineactual, 'Items Paralelos', 2, 'Arial, cursiva, 8');
  List.Titulo(0, 0, List.linealargopagina(salida), 1, 'Arial, normal, 11');
  List.Titulo(0, 0, ' ', 1, 'Arial, negrita, 8');

  l := TQuery.Create(nil); r := TQuery.Create(nil); t := TQuery.Create(nil);
  l := nomeclatura.setNomeclatura;
  l.Open; l.First;
  while not l.EOF do Begin
    if (l.FieldByName('codigo').AsString >= xdcodigo) and (l.FieldByName('codigo').AsString <= xhcodigo) then Begin
      if datosdb.Buscar(tabla, 'codigo', 'items', l.FieldByName('codigo').AsString, '01') then Begin
        // Datos del Análisis
        nomeclatura.getDatos(l.FieldByName('codigo').AsString);
        List.Linea(0, 0, nomeclatura.codigo + '   ' + UpperCase(nomeclatura.descrip), 1, 'Arial, negrita, 9', salida, 'N');
        // Extraemos los items de la plantilla
        r := TQuery.Create(nil); t := TQuery.Create(nil);
        r := setPlantanalisis(l.FieldByName('codigo').AsString); t := setPlantanalisis(l.FieldByName('codigo').AsString);
        r.Open; t.Open;

        // Ahora imprimimos los items paralelo a la desripción del anlalisis - Nivel 0
        t.First; itp := False;
        while not t.EOF do Begin
          if t.FieldByName('itemsParalelo').AsString = '00' then Begin
            if Length(Trim(t.FieldByName('distancia').AsString)) > 0 then distancia := StrToInt(t.FieldByName('distancia').AsString) else distancia := 50;
            List.Linea(distancia, list.lineactual, t.FieldByName('elemento').AsString, 2, 'Arial, normal, 8', salida, 'N');
            if Length(Trim(t.FieldByName('resultado').AsString)) > 0 then List.Linea(distancia + 25, list.lineactual, t.FieldByName('resultado').AsString, 3, 'Arial, normal, 8', salida, 'N');
            if Length(Trim(t.FieldByName('valoresn').AsString)) > 0 then List.Linea(distancia + 25, list.lineactual, t.FieldByName('valoresn').AsString, 4, 'Arial, normal, 8', salida, 'S') else List.Linea(distancia + 25, list.lineactual, ' ', 4, 'Arial, normal, 8', salida, 'S');
            itp := True;
          end;
          t.Next;
        end;

        // Completamos
        if not itp then List.Linea(95, list.lineactual, ' ', 2, 'Arial, normal, 8', salida, 'S');
        List.Linea(0, 0, '   ', 1, 'Arial, negrita, 5', salida, 'S');

        // Damos Formato a la Plantilla
        while not r.EOF do Begin
          if Length(Trim(r.FieldByName('itemsParalelo').AsString)) = 0 then Begin
            // Items Independientes
            List.Linea(0, 0, utiles.espacios(3) + r.FieldByName('elemento').AsString, 1, 'Arial, normal, 8', salida, 'N');
            // Ahora imprimimos los items paralelos
            t.First; itp := False;
            while not t.EOF do Begin
              if t.FieldByName('itemsParalelo').AsString = r.FieldByName('items').AsString then Begin
                if Length(Trim(t.FieldByName('distancia').AsString)) > 0 then distancia := StrToInt(t.FieldByName('distancia').AsString) else distancia := 50;
                List.Linea(distancia, list.lineactual, t.FieldByName('elemento').AsString, 2, 'Arial, normal, 8', salida, 'N');
                List.Linea(distancia + 25, list.lineactual, t.FieldByName('resultado').AsString, 3, 'Arial, normal, 8', salida, 'S');
                if Length(Trim(t.FieldByName('valoresn').AsString)) > 0 then List.Linea(distancia + 25, list.lineactual, t.FieldByName('valoresn').AsString, 4, 'Arial, normal, 8', salida, 'S') else List.Linea(distancia + 25, list.lineactual, ' ', 4, 'Arial, normal, 8', salida, 'S');
                itp := True;
              end;
              t.Next;
            end;
          end;
          r.Next;
        end;
        r.Close; t.Close;
        // Fin Impresión de Items
        dtl := True;
      end;
    end;

    l.Next;
  end;
  l.Close; l.Free; r.Free; t.Free; l := nil; r := nil;

  if not dtl then utiles.msgError('No Existen datos para Listar ...!') else list.FinList;
end;

procedure TTPlantillaAnalisisClinicos.Listar(xdcodigo, xhcodigo: string; salida: char);
// Objetivo...: Listar Plantilla de análisis clínicos
begin
  List.Titulo(0, 0, ' ', 1, 'Arial, negrita, 14');
  List.Titulo(0, 0, ' Plantilla de Análisis Clínicos', 1, 'Arial, negrita, 14');
  List.Titulo(0, 0, ' ', 1, 'Arial, negrita, 5');
  List.Titulo(0, 0, utiles.espacios(3) +  'Elemento', 1, 'Arial, cursiva, 8');
  List.Titulo(38, list.Lineactual, 'Valores Normales', 2, 'Arial, cursiva, 8');
  List.Titulo(65, list.Lineactual, 'Resultado Predet.', 3, 'Arial, cursiva, 8');
  List.Titulo(85, list.Lineactual, 'Imp.', 4, 'Arial, cursiva, 8');
  List.Titulo(90, list.Lineactual, 'Dist.', 5, 'Arial, cursiva, 8');
  List.Titulo(96, list.Lineactual, 'It.Par.', 6, 'Arial, cursiva, 8');
  List.Titulo(0, 0, List.linealargopagina(salida), 1, 'Arial, normal, 11');
  List.Titulo(0, 0, ' ', 1, 'Arial, negrita, 8');

  tabla.First; idanter := '';
  while not tabla.EOF do
    begin
      if (tabla.FieldByName('codigo').AsString >= xdcodigo) and (tabla.FieldByName('codigo').AsString <= xhcodigo) then Begin
        if tabla.FieldByName('codigo').AsString <> idanter then
          begin
            List.Linea(0, 0, '   ', 1, 'Arial, negrita, 5', salida, 'S');
            list.ListMemo('observaciones', 'Arial, cursiva, 8', 0, salida, tabla, 0);
            if (idanter <> '') and not (list.EfectuoSaltoPagina) then Begin
              List.Linea(0, 0, list.LineaLargopagina(salida), 1, 'Arial, normal, 11', salida, 'S');
              List.Linea(0, 0, '   ', 1, 'Arial, negrita, 5', salida, 'S');
            end;
            nomeclatura.getDatos(tabla.FieldByName('codigo').AsString);
            List.Linea(0, 0, nomeclatura.codigo + '   ' + UpperCase(nomeclatura.descrip), 1, 'Arial, negrita, 9', salida, 'S');
            List.Linea(0, 0, '   ', 1, 'Arial, negrita, 5', salida, 'S');
            idanter := tabla.FieldByName('codigo').AsString;
          end;
        List.Linea(0, 0, utiles.espacios(3) + tabla.FieldByName('elemento').AsString, 1, 'Arial, normal, 8', salida, 'N');
        List.Linea(38, list.lineactual, tabla.FieldByName('valoresn').AsString, 2, 'Arial, normal, 8', salida, 'N');
        List.Linea(65, list.lineactual, tabla.FieldByName('resultado').AsString, 3, 'Arial, normal, 8', salida, 'N');
        List.Linea(85, list.lineactual, tabla.FieldByName('imputable').AsString, 4, 'Courier New, normal, 8', salida, 'N');
        List.Linea(90, list.lineactual, tabla.FieldByName('Distancia').AsString, 5, 'Courier New, normal, 8', salida, 'N');
        List.Linea(97, list.lineactual, tabla.FieldByName('itemsParalelo').AsString, 6, 'Courier New, normal, 8', salida, 'S');
        list.ListMemo('observaciones', 'Arial, cursiva, 8', 0, salida, tabref, 0);
      end;
      tabla.Next;
    end;

  List.Linea(0, 0, list.LineaLargopagina(salida), 1, 'Arial, normal, 11', salida, 'S');
  list.FinList;
end;

function TTPlantillaAnalisisClinicos.verificarCodNomeclador(xcodigo: string): boolean;
// Objetivo...: Verificar la existencia del código del nomeclador
var
  b: boolean;
begin
  b := False;
  if not tabla.Active then Begin
    tabla.Open;
    b := True;
  end;

  Result := False;
  tabla.First;
  while not tabla.EOF do Begin
    if tabla.FieldByName('codigo').AsString = xcodigo then Begin
      Result := True;
      Break;
    end;
    tabla.Next;
  end;

  if b then tabla.Close;
end;

function  TTPlantillaAnalisisClinicos.Bloquear(xproceso: String): Boolean;
// Objetivo...: Bloquear Proceso
begin
  Result := bloqueo.Bloquear(xproceso);
end;

procedure TTPlantillaAnalisisClinicos.QuitarBloqueo(xproceso: String);
// Objetivo...: Quitar Bloqueo
begin
  bloqueo.QuitarBloqueo(xproceso);
end;

procedure TTPlantillaAnalisisClinicos.conectar;
// Objetivo...: Abrir tablas de persistencia
begin
  nomeclatura.conectar;
  nbu.conectar;
  if conexiones = 0 then Begin
    if not tabla.Active then tabla.Open;
    if not tabref.Active then tabref.Open;
  end;
  Inc(conexiones);
end;

procedure TTPlantillaAnalisisClinicos.desconectar;
// Objetivo...: cerrar tablas de persistencia
begin
  nomeclatura.desconectar;
  nbu.desconectar;
  if conexiones > 0 then Dec(conexiones);
  if conexiones = 0 then Begin
    datosdb.closeDB(tabla);
    datosdb.closeDB(tabref);
  end;
end;

{===============================================================================}

function plantanalisis: TTPlantillaAnalisisClinicos;
begin
  if xplantanalisis = nil then
    xplantanalisis := TTPlantillaAnalisisClinicos.Create;
  Result := xplantanalisis;
end;

{===============================================================================}

initialization

finalization
  xplantanalisis.Free;

end.
